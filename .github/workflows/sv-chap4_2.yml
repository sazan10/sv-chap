name: sv-chap4_2

on:
  push:

jobs:
  run-vmwarechap:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 


      - name: Install Chap dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake 
      - name: Clone chap repository and build
        run: |
          git clone https://github.com/vmware/chap.git /tmp/chap
          cd /tmp/chap
          git submodule update --init --recursive
          mkdir build-chap
          cd build-chap
          cmake ../
          make
      - name: Setup and compile SV-benchmark
        run: |
          set +e
          directory="$GITHUB_WORKSPACE"
          ulimit -c unlimited
          git clone https://gitlab.com/sosy-lab/benchmarking/sv-benchmarks.git
          cd sv-benchmarks/c
          mkdir -p chap_results
          DIR_FILE="../../directories4_2.txt"
          CC="clang"
          CFLAGS="-fPIE -fPIC -g -O2"
          OUTPUT_DIR="build"
          LOG_FILE="compiled_files.log"
          ERROR_LOG="compilation_errors.log"
          read -r -a dirs < "$DIR_FILE"
          # Iterate over each directory in the array
          for dir in "${dirs[@]}"; do
              # Check if the directory exists
              if [ -d "$dir" ]; then
                  # Find all .c files in the directory
                  for file in $(find "$dir" -type f -name "*.c"); do
                      # Get the base name of the file (without extension)
                      base_name=$(basename "$file" .c)
                      dirname=$(dirname "$file" ) 
                      # Compile the file to an object file in the output directory
                      echo "Compiling $file..."
                      echo "Directory name: $dirname/$base_name"
                      $CC $CFLAGS "$file" -o "$dirname/$base_name"
                      # Check if the compilation succeeded
                      if [ $? -ne 0 ]; then
                          echo "Error compiling $file. Exiting."
                          echo "Error compiling $file." >> "$ERROR_LOG"
                      else
                         	# Log the successfully compiled file and its directory
                          echo "Successfully compiled: $file -> $dirname/$base_name" >> "$LOG_FILE"
                      fi
                  done
              else
                  echo "Directory $dir does not exist. Skipping."
              fi
          done 
      - name: Run VMware Chap Analyzer
        run: |
          set +e
          directory="$GITHUB_WORKSPACE"
          ulimit -c unlimited
          cd sv-benchmarks/c
          mkdir -p chap_results
    
          is_executable() {
            local file="$1"
            if file "$file" | grep -q 'ELF 64-bit'; then
              return 0
            else
              return 1
            fi
          }
          run_exe() {
            local executable="$1"
            "$executable"
            # local exit_status=$?
          }
          find . -type f -executable | while read -r file; do
            if is_executable "$file"; then
                echo "Executing $file:"
                run_exe "$file" $i
            fi
          done
          
          commands=("count" "describe" "dump" "enumerate" "explain" "list" "show" "summarize")
          sub_commands=("allocations" "anchored" "anchorpoints" "externalanchored" "externalanchorpoints" "free" "inaccessible" "leaked" "readonly" "registeranchored" "registeranchorpoints" "rxonly" "stackanchorpoints")
          for core_file in /var/lib/apport/coredump/*; do
              if [ -f "$core_file" ]; then
                
                  output_file="./chap_results/${core_file##*/}"
                  mkdir -p "$output_file"
                  for i in {1..10}; do
                    for command in "${commands[@]}"; do
                      for sub_command in "${sub_commands[@]}"; do
                          timeout 10s /tmp/chap/build-chap/chap "$core_file" <<EOF >>"$output_file/$i.txt" 2>/dev/null
                          $command $sub_command
          EOF
                      done
                    done
                  done
              fi
          done
          
      - name: Upload Chap reports
        uses: actions/upload-artifact@v4
        with:
          name: chap-report
          path: './sv-benchmarks/c/chap_results/*'
